<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Matteo Totaro</title>
    <link>http://localhost:63502/tags/javascript/</link>
    <description>Recent content in Javascript on Matteo Totaro</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 07 Apr 2025 17:30:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:63502/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Objectify Yourself</title>
      <link>http://localhost:63502/projects/objdetect/</link>
      <pubDate>Sun, 06 Apr 2025 13:30:00 +0200</pubDate>
      <guid>http://localhost:63502/projects/objdetect/</guid>
      <description>&lt;div class=&#34;typeit&#34;&gt;&lt;h3 id=&#34;id-1&#34;&gt;&lt;/h3&gt;&lt;/div&gt;&#xA;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css&#34;&gt;&#xA;&#xA;&lt;script src=&#34;https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@4.15.0/dist/tf.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script src=&#34;https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd@2.2.2/dist/coco-ssd.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script src=&#34;https://cdn.jsdelivr.net/npm/@tensorflow-models/mobilenet@2.1.0&#34;&gt;&lt;/script&gt;&#xA;&#xA;&lt;style&gt;&#xA;    :root {&#xA;        --camera-bg: #111;&#xA;        --camera-accent: #ffffff;  &#xA;        --camera-accent-hover: #f0f0f0;&#xA;        --record-color: #ff3b30;&#xA;        --record-hover: #ff5e54;&#xA;    }&#xA;    &#xA;    .video-app-container {&#xA;        position: relative;&#xA;        max-width: 100%;&#xA;        width: 100%;&#xA;        margin: 0 auto;&#xA;        background-color: var(--camera-bg);&#xA;        border-radius: 16px;&#xA;        overflow: hidden;&#xA;        box-shadow: 0 10px 25px rgba(0,0,0,0.2);&#xA;        aspect-ratio: 9/13;&#xA;        height: auto;&#xA;    }&#xA;&#xA;    .video-container {&#xA;        position: relative;&#xA;        width: 100%;&#xA;        height: 100%;&#xA;        overflow: hidden;&#xA;        background-color: black;&#xA;    }&#xA;&#xA;    #webcam {&#xA;        position: absolute;&#xA;        top: 0;&#xA;        left: 0;&#xA;        width: 100%;&#xA;        height: 100%;&#xA;        object-fit: cover;&#xA;        z-index: 1;&#xA;    }&#xA;&#xA;    #canvas {&#xA;        position: absolute;&#xA;        top: 0;&#xA;        left: 0;&#xA;        width: 100%;&#xA;        height: 100%;&#xA;        z-index: 2;&#xA;        pointer-events: none;&#xA;    }&#xA;    &#xA;    #loading {&#xA;        position: absolute;&#xA;        top: 0;&#xA;        left: 0;&#xA;        width: 100%;&#xA;        height: 4px;&#xA;        background: rgba(255,255,255,0.2);&#xA;        z-index: 10;&#xA;    }&#xA;    &#xA;    #loading-progress {&#xA;        height: 100%;&#xA;        width: 0%;&#xA;        background: linear-gradient(90deg, #4CAF50, #8BC34A);&#xA;        transition: width 0.3s;&#xA;    }&#xA;&#xA;    .controls {&#xA;        position: absolute;&#xA;        bottom: 0;&#xA;        left: 0;&#xA;        width: 100%;&#xA;        display: flex;&#xA;        justify-content: space-between;&#xA;        align-items: center;&#xA;        padding: 1rem;&#xA;        background: linear-gradient(to top, rgba(0,0,0,0.7), transparent);&#xA;        z-index: 4;&#xA;    }&#xA;&#xA;    .control-main {&#xA;        display: flex;&#xA;        justify-content: center;&#xA;        flex-grow: 1;&#xA;        gap: 2rem;&#xA;    }&#xA;&#xA;    .control-side {&#xA;        width: 80px;&#xA;        display: flex;&#xA;        justify-content: center;&#xA;    }&#xA;    &#xA;    .control-button {&#xA;        width: 60px;&#xA;        height: 60px;&#xA;        border-radius: 50%;&#xA;        border: none;&#xA;        background: var(--camera-accent);&#xA;        color: #333;  &#xA;        cursor: pointer;&#xA;        transition: all 0.2s;&#xA;        display: flex;&#xA;        align-items: center;&#xA;        justify-content: center;&#xA;        font-size: 1.5rem;&#xA;    }&#xA;    &#xA;    #recordButton {&#xA;        background: var(--record-color);&#xA;        color: white;&#xA;    }&#xA;    &#xA;    #recordButton:hover {&#xA;        background: var(--record-hover);&#xA;    }&#xA;    &#xA;    .control-button.small {&#xA;        width: 40px;&#xA;        height: 40px;&#xA;        font-size: 1rem;&#xA;        background: transparent;&#xA;        color: white;&#xA;        border: 2px solid white;&#xA;    }&#xA;    &#xA;    .control-button.small:hover {&#xA;        background: rgba(255,255,255,0.1);&#xA;    }&#xA;    &#xA;    .control-button:hover {&#xA;        background: var(--camera-accent-hover);&#xA;    }&#xA;    &#xA;    .control-button.recording {&#xA;        animation: pulse 1.5s infinite;&#xA;    }&#xA;    &#xA;    @keyframes pulse {&#xA;        0% { box-shadow: 0 0 0 0 rgba(255, 59, 48, 0.7); }&#xA;        70% { box-shadow: 0 0 0 15px rgba(255, 59, 48, 0); }&#xA;        100% { box-shadow: 0 0 0 0 rgba(255, 59, 48, 0); }&#xA;    }&#xA;    &#xA;     &#xA;    .status-bar {&#xA;        position: absolute;&#xA;        top: 0;&#xA;        left: 0;&#xA;        width: calc(100% - 2rem);&#xA;        padding: 0.8rem 1rem;&#xA;        display: flex;&#xA;        justify-content: space-between;&#xA;        color: white;&#xA;        z-index: 10;&#xA;        font-size: 0.9rem;&#xA;        font-weight: 600;&#xA;    }&#xA;    &#xA;    #startCameraBtn {&#xA;        position: absolute;&#xA;        bottom: 100px;&#xA;        left: 50%;&#xA;        transform: translateX(-50%);&#xA;        z-index: 5;&#xA;        padding: 0.8rem 1.5rem;&#xA;        font-size: 1rem;&#xA;        background: var(--camera-accent);&#xA;        border: none;&#xA;        color: #333;&#xA;        border-radius: 30px;&#xA;        display: flex;&#xA;        align-items: center;&#xA;        box-shadow: 0 4px 8px rgba(0,0,0,0.3);&#xA;    }&#xA;    &#xA;    #startCameraBtn:hover {&#xA;        background: var(--camera-accent-hover);&#xA;    }&#xA;    &#xA;     &#xA;    @media (min-width: 768px) {&#xA;        .video-app-container {&#xA;            max-width: 400px;&#xA;            aspect-ratio: 9/13;&#xA;        }&#xA;    }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;div class=&#34;video-app-container&#34;&gt;&#xA;    &lt;div class=&#34;status-bar&#34;&gt;&#xA;        &lt;span class=&#34;current-time&#34;&gt;14:30&lt;/span&gt;&#xA;        &lt;div class=&#34;status-icons&#34;&gt;&#xA;            &lt;i class=&#34;fas fa-signal&#34;&gt;&lt;/i&gt;&#xA;            &lt;i class=&#34;fas fa-battery-three-quarters&#34; style=&#34;margin-left: 8px;&#34;&gt;&lt;/i&gt;&#xA;        &lt;/div&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;    &lt;div id=&#34;loading&#34;&gt;&lt;div id=&#34;loading-progress&#34;&gt;&lt;/div&gt;&lt;/div&gt;&#xA;    &#xA;    &lt;div class=&#34;video-container&#34;&gt;&#xA;        &lt;button id=&#34;startCameraBtn&#34;&gt;&#xA;            &lt;i class=&#34;fas fa-camera&#34; style=&#34;margin-right: 8px;&#34;&gt;&lt;/i&gt; Start Camera&#xA;        &lt;/button&gt;&#xA;        &lt;video id=&#34;webcam&#34; autoplay playsinline style=&#34;display: none;&#34;&gt;&lt;/video&gt;&#xA;        &lt;canvas id=&#34;canvas&#34;&gt;&lt;/canvas&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &lt;div class=&#34;controls&#34;&gt;&#xA;        &lt;div class=&#34;control-side&#34;&gt;&#xA;            &lt;button class=&#34;control-button small&#34; id=&#34;flipButton&#34; title=&#34;Flip Camera&#34;&gt;&#xA;                &lt;i class=&#34;fas fa-camera-rotate&#34;&gt;&lt;/i&gt;&#xA;            &lt;/button&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;div class=&#34;control-main&#34;&gt;&#xA;            &lt;button class=&#34;control-button&#34; id=&#34;photoButton&#34; title=&#34;Take Photo&#34;&gt;&#xA;                &lt;i class=&#34;fas fa-camera&#34;&gt;&lt;/i&gt;&#xA;            &lt;/button&gt;&#xA;            &lt;button class=&#34;control-button&#34; id=&#34;recordButton&#34; title=&#34;Record Video&#34;&gt;&#xA;                &lt;i class=&#34;fas fa-video&#34;&gt;&lt;/i&gt;&#xA;            &lt;/button&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;div class=&#34;control-side&#34;&gt;&#xA;            &lt;button class=&#34;control-button small&#34; id=&#34;modelToggle&#34; title=&#34;Switch Model&#34;&gt;&#xA;                &lt;i class=&#34;fas fa-robot&#34;&gt;&lt;/i&gt;&#xA;            &lt;/button&gt;&#xA;        &lt;/div&gt;&#xA;    &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;script&gt;&#xA;    &#xA;    let model;&#xA;    let mobileNetModel;&#xA;    let webcam;&#xA;    let canvas;&#xA;    let ctx;&#xA;    let isModelLoading = false;&#xA;    let isCameraOn = false;&#xA;    let isRecording = false;&#xA;    let mediaRecorder;&#xA;    let recordedChunks = [];&#xA;    let isFrontCamera = false;&#xA;    let loadingProgress = 0;&#xA;    let loadingInterval;&#xA;    let currentModel = &#39;coco-ssd&#39;; &#xA;&#xA;    &#xA;    const loadingElement = document.getElementById(&#39;loading&#39;);&#xA;    const loadingProgressElement = document.getElementById(&#39;loading-progress&#39;);&#xA;    const startCameraBtn = document.getElementById(&#39;startCameraBtn&#39;);&#xA;    const webcamElement = document.getElementById(&#39;webcam&#39;);&#xA;    const canvasElement = document.getElementById(&#39;canvas&#39;);&#xA;    const photoButton = document.getElementById(&#39;photoButton&#39;);&#xA;    const recordButton = document.getElementById(&#39;recordButton&#39;);&#xA;    const flipButton = document.getElementById(&#39;flipButton&#39;);&#xA;    const modelToggle = document.getElementById(&#39;modelToggle&#39;);&#xA;&#xA;    &#xA;    document.addEventListener(&#39;DOMContentLoaded&#39;, async () =&gt; {&#xA;        updateTime();&#xA;        setInterval(updateTime, 1000);&#xA;        &#xA;        startLoadingAnimation();&#xA;        await loadModels();&#xA;        stopLoadingAnimation();&#xA;    });&#xA;&#xA;    &#xA;    function updateTime() {&#xA;        const now = new Date();&#xA;        const hours = now.getHours().toString().padStart(2, &#39;0&#39;);&#xA;        const minutes = now.getMinutes().toString().padStart(2, &#39;0&#39;);&#xA;        document.querySelector(&#39;.current-time&#39;).textContent = `${hours}:${minutes}`;&#xA;    }&#xA;&#xA;    &#xA;    function startLoadingAnimation() {&#xA;        loadingProgress = 0;&#xA;        loadingElement.style.display = &#39;block&#39;;&#xA;        loadingInterval = setInterval(() =&gt; {&#xA;            loadingProgress += Math.random() * 5;&#xA;            if (loadingProgress &gt; 95) loadingProgress = 95;&#xA;            loadingProgressElement.style.width = `${loadingProgress}%`;&#xA;        }, 200);&#xA;    }&#xA;&#xA;    function stopLoadingAnimation() {&#xA;        clearInterval(loadingInterval);&#xA;        loadingProgressElement.style.width = &#39;100%&#39;;&#xA;        setTimeout(() =&gt; {&#xA;            loadingElement.style.display = &#39;none&#39;;&#xA;        }, 300);&#xA;    }&#xA;&#xA;    &#xA;    async function loadModels() {&#xA;        if (isModelLoading) return;&#xA;        isModelLoading = true;&#xA;        &#xA;        try {&#xA;            &#xA;            model = await cocoSsd.load(window.modelConfig);&#xA;            mobileNetModel = await mobilenet.load();&#xA;            console.log(&#34;All models loaded successfully&#34;);&#xA;        } catch (error) {&#xA;            console.error(&#34;Failed to load models:&#34;, error);&#xA;        }&#xA;    }&#xA;&#xA;    &#xA;    async function toggleModel() {&#xA;        currentModel = currentModel === &#39;coco-ssd&#39; ? &#39;mobilenet&#39; : &#39;coco-ssd&#39;;&#xA;        modelToggle.innerHTML = currentModel === &#39;coco-ssd&#39; ? &#xA;            &#39;&lt;i class=&#34;fas fa-robot&#34;&gt;&lt;/i&gt;&#39; : &#xA;            &#39;&lt;i class=&#34;fas fa-bolt&#34;&gt;&lt;/i&gt;&#39;;&#xA;        &#xA;        if (isCameraOn) {&#xA;            &#xA;            detectObjects();&#xA;        }&#xA;    }&#xA;&#xA;    &#xA;    async function startCamera() {&#xA;        if (isCameraOn) return;&#xA;        &#xA;        try {&#xA;            startCameraBtn.style.display = &#39;none&#39;;&#xA;            &#xA;            const stream = await navigator.mediaDevices.getUserMedia({&#xA;                video: {&#xA;                    facingMode: isFrontCamera ? &#34;user&#34; : &#34;environment&#34;,&#xA;                    width: { ideal: 1280 },&#xA;                    height: { ideal: 720 }&#xA;                }&#xA;            });&#xA;            &#xA;            webcamElement.srcObject = stream;&#xA;            webcamElement.style.display = &#39;block&#39;;&#xA;            &#xA;            webcamElement.onloadedmetadata = () =&gt; {&#xA;                webcamElement.play();&#xA;                adjustCanvasSize();&#xA;                isCameraOn = true;&#xA;                detectObjects();&#xA;            };&#xA;            &#xA;        } catch (error) {&#xA;            console.error(&#34;Camera error:&#34;, error);&#xA;            startCameraBtn.style.display = &#39;flex&#39;;&#xA;        }&#xA;    }&#xA;&#xA;    function adjustCanvasSize() {&#xA;        canvasElement.width = webcamElement.videoWidth;&#xA;        canvasElement.height = webcamElement.videoHeight;&#xA;        ctx = canvasElement.getContext(&#39;2d&#39;);&#xA;    }&#xA;&#xA;    &#xA;    async function detectObjects() {&#xA;        if (!isCameraOn || !model || !mobileNetModel) return;&#xA;        &#xA;        try {&#xA;            &#xA;            ctx.clearRect(0, 0, canvasElement.width, canvasElement.height);&#xA;            &#xA;            &#xA;            ctx.drawImage(webcamElement, 0, 0, canvasElement.width, canvasElement.height);&#xA;            &#xA;            &#xA;            let predictions;&#xA;            if (currentModel === &#39;coco-ssd&#39;) {&#xA;                predictions = await model.detect(webcamElement);&#xA;            } else {&#xA;                &#xA;                predictions = await mobileNetModel.classify(webcamElement);&#xA;                &#xA;                predictions = predictions.map(pred =&gt; ({&#xA;                    bbox: [0, 0, 0, 0], &#xA;                    class: pred.className,&#xA;                    score: pred.probability&#xA;                }));&#xA;            }&#xA;            &#xA;            &#xA;            drawDetections(predictions);&#xA;        } catch (error) {&#xA;            console.error(&#34;Detection error:&#34;, error);&#xA;        }&#xA;        &#xA;        requestAnimationFrame(detectObjects);&#xA;    }&#xA;&#xA;    function drawDetections(predictions) {&#xA;        predictions.forEach(prediction =&gt; {&#xA;            if (currentModel === &#39;coco-ssd&#39;) {&#xA;                &#xA;                const [x, y, width, height] = prediction.bbox;&#xA;                &#xA;                &#xA;                ctx.strokeStyle = &#39;#00FF00&#39;;&#xA;                ctx.lineWidth = 4;&#xA;                ctx.strokeRect(x, y, width, height);&#xA;                &#xA;                &#xA;                const label = `${prediction.class} ${Math.round(prediction.score * 100)}%`;&#xA;                ctx.font = &#39;16px Arial&#39;;&#xA;                const textWidth = ctx.measureText(label).width;&#xA;                &#xA;                ctx.fillStyle = &#39;rgba(0, 0, 0, 0.5)&#39;;&#xA;                ctx.fillRect(x, y &gt; 20 ? y - 20 : 0, textWidth + 10, 20);&#xA;                &#xA;                ctx.fillStyle = &#39;#00FF00&#39;;&#xA;                ctx.fillText(label, x + 5, y &gt; 20 ? y - 5 : 15);&#xA;            } else {&#xA;                &#xA;                const label = `${prediction.class} ${Math.round(prediction.score * 100)}%`;&#xA;                ctx.font = &#39;16px Arial&#39;;&#xA;                const textWidth = ctx.measureText(label).width;&#xA;                const x = 10;&#xA;                const y = 30 * (predictions.indexOf(prediction) + 30);&#xA;                &#xA;                ctx.fillStyle = &#39;rgba(0, 0, 0, 0.5)&#39;;&#xA;                ctx.fillRect(x, y - 20, textWidth + 10, 20);&#xA;                &#xA;                ctx.fillStyle = &#39;#00FF00&#39;;&#xA;                ctx.fillText(label, x + 5, y - 5);&#xA;            }&#xA;        });&#xA;    }&#xA;&#xA;    &#xA;    async function takePhotoWithDetection() {&#xA;        if (!isCameraOn) return;&#xA;        &#xA;        const photoCanvas = document.createElement(&#39;canvas&#39;);&#xA;        photoCanvas.width = canvasElement.width;&#xA;        photoCanvas.height = canvasElement.height;&#xA;        const photoCtx = photoCanvas.getContext(&#39;2d&#39;);&#xA;        &#xA;        &#xA;        photoCtx.drawImage(canvasElement, 0, 0);&#xA;        &#xA;        &#xA;        const link = document.createElement(&#39;a&#39;);&#xA;        link.download = `detection-${new Date().toISOString()}.png`;&#xA;        link.href = photoCanvas.toDataURL(&#39;image/png&#39;);&#xA;        link.click();&#xA;    }&#xA;&#xA;    &#xA;    function toggleRecording() {&#xA;        if (!isCameraOn) return;&#xA;        &#xA;        if (!isRecording) {&#xA;            startRecording();&#xA;        } else {&#xA;            stopRecording();&#xA;        }&#xA;    }&#xA;&#xA;    function startRecording() {&#xA;        recordedChunks = [];&#xA;        const stream = webcamElement.srcObject;&#xA;        mediaRecorder = new MediaRecorder(stream);&#xA;        &#xA;        mediaRecorder.ondataavailable = (e) =&gt; {&#xA;            if (e.data.size &gt; 0) recordedChunks.push(e.data);&#xA;        };&#xA;        &#xA;        mediaRecorder.onstop = () =&gt; {&#xA;            const blob = new Blob(recordedChunks, { type: &#39;video/webm&#39; });&#xA;            const url = URL.createObjectURL(blob);&#xA;            const link = document.createElement(&#39;a&#39;);&#xA;            link.download = `recording-${new Date().toISOString()}.webm`;&#xA;            link.href = url;&#xA;            link.click();&#xA;        };&#xA;        &#xA;        mediaRecorder.start();&#xA;        isRecording = true;&#xA;        recordButton.classList.add(&#39;recording&#39;);&#xA;    }&#xA;&#xA;    function stopRecording() {&#xA;        mediaRecorder.stop();&#xA;        isRecording = false;&#xA;        recordButton.classList.remove(&#39;recording&#39;);&#xA;    }&#xA;&#xA;    &#xA;    async function flipCamera() {&#xA;        if (!isCameraOn) return;&#xA;        &#xA;        isFrontCamera = !isFrontCamera;&#xA;        await stopCamera();&#xA;        await startCamera();&#xA;    }&#xA;&#xA;    async function stopCamera() {&#xA;        if (!isCameraOn) return;&#xA;        &#xA;        if (isRecording) {&#xA;            stopRecording();&#xA;        }&#xA;        &#xA;        const stream = webcamElement.srcObject;&#xA;        const tracks = stream.getTracks();&#xA;        tracks.forEach(track =&gt; track.stop());&#xA;        &#xA;        webcamElement.srcObject = null;&#xA;        ctx.clearRect(0, 0, canvasElement.width, canvasElement.height);&#xA;        isCameraOn = false;&#xA;        startCameraBtn.style.display = &#39;flex&#39;;&#xA;    }&#xA;&#xA;    &#xA;    startCameraBtn.addEventListener(&#39;click&#39;, startCamera);&#xA;    photoButton.addEventListener(&#39;click&#39;, takePhotoWithDetection);&#xA;    recordButton.addEventListener(&#39;click&#39;, toggleRecording);&#xA;    flipButton.addEventListener(&#39;click&#39;, flipCamera);&#xA;    modelToggle.addEventListener(&#39;click&#39;, toggleModel);&#xA;&lt;/script&gt;&#xA;&lt;div class=&#34;typeit&#34;&gt;&lt;h4 id=&#34;id-2&#34;&gt;&lt;/h4&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
